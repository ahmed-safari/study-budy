// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model StudySession {
  id          String      @id @default(cuid())
  title       String
  description String?
  subject   String
  materials   Material[] 
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Material {
  id          String      @id @default(cuid())
  title       String?
  description String?
  type        String
  link        String?
  fileName    String?
  rawContent  String?
  status      String
  studySessionId String
  studySession   StudySession @relation(fields: [studySessionId], references: [id])
  quizzes       Quiz[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Quiz {
  id          String      @id @default(cuid())
  title       String
  description String?
  difficulty  String      // easy, medium, hard
  timeLimit   Int?        // time limit in minutes, null for no limit
  materialId  String
  material    Material    @relation(fields: [materialId], references: [id])
  questions   Question[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Question {
  id          String      @id @default(cuid())
  text        String
  type        String      // multiple-choice, multi-select, true-false, short-answer
  options     Json?       // Array of option objects: [{id: string, text: string}]
  correctAnswer Json      // String for single answer, String[] for multi-select
  explanation String?
  quizId      String
  quiz        Quiz        @relation(fields: [quizId], references: [id], onDelete: Cascade)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}